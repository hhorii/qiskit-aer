{"project": "qiskit-aer", "project_url": "http://qiskit.org/aer", "show_commit_url": "https://github.com/Qiskit/qiskit-aer/commit/", "hash_length": 8, "revision_to_hash": {"344": "b660e8b5ca0a4d5fe719e860681f29812293bd59", "398": "21fdd7e7503dc8ac7dfaee24b927f26d1eff42f8", "633": "359b3df7c1d15d5720c3d5fe662ce5cbcc44ee12", "648": "e97502622f55c719577877d271cac195a5bd51b6", "718": "c67018df7fea125a746c9004a985bf131b8854f3", "723": "f12102310b02f91cdb7319fd2f74481691007630", "785": "ef1274c01d8b281458b1401083c178c288023005", "823": "2b7f65c4a30bb5cf6954fcf9b6ef22b1b00d7e4f", "831": "e180e4a7c85d404a4c3da28e3b55d0c3133a7d72", "868": "68e429e0de82e2c15806b37f13742e8741f47dd7", "925": "86a875824fc54ce67e99241b8e816c55d47eb830", "1092": "9e729b7a2bb2a3772d1f65dccb39f5cc16bf7e4f", "1148": "3baf58886a2f05277da354ce3a2a46eeab8db725", "1169": "17c3b10aba8222f72fbc82302e38dbdc29c2f49b", "1215": "4bec2954a9e28704327c66440d231509f64839ab", "1310": "25de39f0916290d914251c1f755fba0332deee1c", "1395": "cf6b2f1a74ccabd977555b867a702927f39bd7c0", "1401": "9e17f97edf7cd8b3c6ac7b13e3842c82ccdd3a0a", "1500": "65e60bfffce5e591c631e48871ce1946db6507bf", "1501": "f715703c631574565669e5ebc3b8a8b8008a1d34", "1507": "cb5f41400f07328b9d4328b39bae3e2d8006f1d7", "1521": "33f13152ad4b101e7800dfd3cfafe05dc5235f43", "1522": "c61ab003aae3358efb03e003e01bbefd2a4e7c4a", "1525": "85473f0457048ea1ad73656f7996d72021a92957", "1527": "b9fd62b09aae4f8085cbd4b26537fcecf532a86d", "1528": "d3fee1e8266b1dda786a426aa59cf80f3bd310c4", "1529": "d3b927a01f996e14b742080bdb4f0307f3fc33a0", "1531": "721fcb4dbdeda625392f66b479b9868f45b756e2", "1532": "efefe04be664c3d7a2253a13e6ce52be49aea7c8", "1535": "0ec5a57ddbcbecf7804b402b798c31e3a3524b87", "1538": "7ef7a44dfeaa5a9e71c01713ec604b3d6d8cf769", "1542": "93cef6cf524bf78250415726d905ba729a3531c4", "1550": "2eed800a52e4aa86afd2bdd0f20bfba1c24bd8c2", "1552": "0e5f01c8aa9e96b48a5c756733d8c103eac4251f", "1553": "8ef3708c856708496dc54a1326fa6127097afab7", "1554": "3455bf719d736e88e2d88ce7564f9ffe76ad1673", "1558": "3fafa1dff76d1a724168afa6076d6084f13bdadd", "1568": "796a12fc6750d3577a13ab2a59a191f7f325e5f1", "1571": "aee51210eee0f3b49019c0d0e33b49733f835c3e", "1577": "e1ee79f7ab0f0da6a9adb6023a3fcae1e2b84e46", "1578": "d4b553fabd986a589343c092a2661bf3583bc67d", "1582": "29a3a82c9a21d04ab81af21726db8686a853264d", "1586": "90248c0938a1ee4217259028b35463c7f90cadd6", "1587": "c5da3faa7a596b5289abb4390931911862f46c1e", "1588": "b7b86c0b69c0a3bee8c6dfda13711255fd0328c0", "1590": "b399e6ebd742c896b0d48d63de77c839d4574ddb", "1592": "d4345b23c10b264a3de0a70bbb87813309e534f6", "1593": "c8ee233f6db7e308d3d4e863ea042272ab40b0cd", "1607": "55d170a912031eadb0ce5ad3bff0ac65f2ffa20c", "1635": "325ae570b3b7cbe5630a3ec21ed4efcaf2540f09", "1638": "294fd36bb7275c6e2f2402a47011db5fba49ca53", "1639": "47820f367967851e45fbce76d609d62e678d70b4", "1644": "1b6accdb7fbf32dfd668ddb0a753706c63ba7d27", "1658": "0cb6cc4741bf29aa3e67a8333047c8cb7c37db9c", "1661": "90727a9e96d8ff122aa5277dfc696274e1e1fe01", "1664": "6d5028bb3ff23c211167b7417920bd15093acf4a", "1666": "466a6ac13d9640914155c35ca08edd7025e39ad1", "1667": "9197a2cdbd171a63835d07a828bb478b814448a6", "1670": "cd397bec0b69ce79834434512da8a8d8351d088e", "1679": "b0f4fdfa2fd2bc4a27a2a7f21a8812a8472b1d4b", "1680": "efa221bb9491b1d2e557bee19659cff810885b31", "1682": "5c3a2d61b1b7149ed0472b8287c6c358a975872b", "1683": "1dbb97e21790c54a52d0faec9216935a730dfb53", "1701": "f1293f143f5aea373b3ae90c0f20f1ca4c09a9e9", "1705": "cee5c4f24a1bec330d7c740840d9cbc5fe2b99bf", "1709": "509f3094dc970470fa90b4125b7fd99f77e46485", "1711": "4a82bab1d5329730bf5ebecfcaf1d24441d95ae9", "1739": "bd11f1ecc9da234f4cc62a61d9458cd4add0927c", "1740": "5335ce9e4ed93a14bd969892b89caa8934f6dba5", "1741": "b96cd88a301d22c9fe6edd236cc439598590a89a", "1743": "72961a92bcbfd1ce603a19eed5fe44571eede644", "1745": "36c385f689f2face82c1eb819dccfb87c2189b2d", "1746": "5b58330966b5336088f8e2bdd26bc42e58822e8a", "1748": "33702ebe5c7b3d0cecbac5b7e2ddae7c1dd54dca", "1752": "48498dd0edc4e1ed1ee4bb287edd89541af104b2", "1753": "921298006bc4527c4699ef07bd791a35c7afd365", "1754": "5698e6e6a4eed25a9373e0735d52dcea7fa1f513", "1756": "c3350f03ccfd3c8db81c6bd634af4ee5814038a9", "1757": "b9e1c91459d0be208e2328f85d4dccda66798cd1", "1760": "f9c9392e20c51f4ae6ced69753743ad229c1734f", "1762": "450ae9642e8d6eb67fbecb994a7cd78742c8e444", "1765": "48a250ec75cfabab75669f67ebabe80455c09189", "1768": "9fb69569c7f2c097a0b7d3150e92d84c0e59c80c", "1769": "e092905b8f2f28781e37a8a5284ae976e1a8988f", "1783": "b508a7d8c89173762f3b30c15aedd144f6d10b18", "1785": "2ea160fb202bf621f928c2d52a2c33fa8d908518", "1789": "43c6847c0a19cdd2c12322dfce5e99f21e32608b", "1800": "6c0a23a470ac9a1c5bba301c6ec4c3759bea6ab5", "1801": "7822d9118e43d4e10aeb81982a6d109a3e8f57c2", "1802": "b475f196a991a873bcc5d7c38e9da55a1005bcd7", "1810": "a31c76edc68c68570ba2075fc0d3bd987488f9e8", "1814": "f869a36d53cf1a64e9afc7770506760288b555db", "1815": "d9d4593b1439663d2f2f9aa6bf2647da9a0c4c23", "1817": "cf8edab653a6e355fe5d7d4751868908bf5ec4e6", "1818": "600806c2c7f0f0e7a4730443dce552d7694fb99b", "1820": "d58737ada4880e7ab0c2bc3df46be93914ab890f", "1830": "998d5322ea6702a7c78cbe046960760079fe2d1f", "1831": "63e33d37b5bc0d40ddf3a9bc5307b2e67b11f1af", "1832": "43a150c40857a8b497053bbb3cb8f06b41374303", "1833": "b274872c0a1c37a4a9e518b88bf6a25447b0a00c", "1834": "2da63a2c7e440042bc4e5d1cf51b5f7240b2e4ba", "1836": "940a8a644a942352b767ab58b193598731a2c2f3", "1838": "350e42125cc57b0acc9e8d44f4bc6030a9c70e8d", "1844": "32be341c7b3a60a8bbbe2c8487a28db67e91ed90", "1846": "2e777bd44cbcee9b0c0916ff48dbba2e838ddad9", "1847": "0ece80f11d61193f74b639b3efb82253fedeaef1", "1851": "a2f29eedbfc2e74f0929f46672fdbde697c2c1c2", "1852": "592339217a55919be80e0d574b82fefee60ef035", "1854": "5b5658cb42253c742375886cbacf0a06c6e9e4a6", "1856": "1a6d5df89a2e016afbb33a2d7088e6100348a7c4", "1857": "756af116e3930c44012282e0bf922f6568746b4e", "1859": "1063501dd9a371d75b762d06e60e352f978f4ea5", "1860": "892a6fd82faaa94a7226777021c3cdbd7ab7bf09", "1865": "cc7b1af53351ac6946c7427bb1499ed594b81cf3", "1866": "dffb1d7b1e5eb10b4c4e8ec7486690f0d747effd", "1867": "71c940bb99f36683d89e8c14736106a9c746d7c0", "1868": "72674296de7de6cfdf812595be33a2f6f637a29f", "1876": "90831eb3e77553765243a79dc3c07b56329cad30", "1880": "020a5096c301ccfad3fc9b8b809a2403fe98921f", "1881": "5c2f507cfa12e53f5273f0134c11509294548c59", "1882": "11c5b8a97758c9121d2d4eea3b93e77144461a47", "1883": "5a72c02e6c9a6aacc95a2cb6bfa641874e34a18c", "1885": "feb9fb26fb8eb37097de20163e53eea06ecb24f2", "1889": "7fe4f9eadc835705c25c13c753b8550b199efa44", "1891": "d69f7e921f120a7db62705f4cf0498eaee9b02dc", "1892": "3d2575ae5fa2cd584210c3a4938b8afe4f3adb75", "1894": "acd216d040c0d9ec1161c82331820841cb13386f", "1896": "1994b351ed863bcf73ff94d068c0b15ffb4c2969", "1903": "7e6ed614cc87156414061bcbfb1c3c1cc8be6b24", "1908": "9a994b831f375a2c394961d0d9483e83fb657b3d", "1910": "6b1ea6eb21656755b8fe1b075e63fd46a277dd29", "1911": "c8fea99b3ca8c5aeb3960755e9b047f4b95012c8", "1924": "7a040f72bdfb5a655bfad78d35530c218260cff9", "1929": "99f84a3ca49c6c7454653959021cab2e20f2d3dc", "1930": "4f615be841bf365394a582f0651bc0d5e22da13d", "1932": "25a6d91553df345abf700ba0399be51d62514a34", "1941": "20c3b06c2464ce0342a920dfbe91c6a496707f7f", "1943": "c7e1159961d0cef0e715af77c0f4ecaca511a18a", "1945": "eafc7e7f26ddc199b69e31b14db5d98a19bf4d33", "1946": "9450103c6e1785cd7771eff035af3de32d604998", "1948": "9f1e9c38110ae6c843adc23b2a6e89a7703e6160", "1949": "78efca21b045fbefa8e019663a4e4661bbfb7a90", "1950": "507f68b7a6eafeeac66f9f9321eaf66fd022d29c", "1956": "c4b88f5dd94242c607782e72fec5ac5cbe755dcb", "1957": "bd91677ec38c0bb0306807acae9c223d1e0e5164", "1960": "1911221ad48ba0db8e4a8c0ae03b3d330036f214", "1964": "54245c36e66c8725b4a1df8d39cd3f8517d73020", "1966": "b38a613c956bdd6e9a4244fa6be0c26d74b3c859", "1975": "5e8b0efb3a8fff5c16900005e1973413def82585", "1978": "759a01f43726d5146422141bfdcc83fc34c180d0", "1979": "65efc1ec5356d09941809ae054cc905fc159eea0", "1981": "ee5ed108bb69b09d20b066b56252c46123c52b12", "1985": "f12665142c56cba9c63333069830639397c61191", "1987": "63fba8f74897bd3c25756198d23df2c857a231ce", "1996": "1a51d273dec6e00f62495d2dca97d7f09e72755f", "1999": "68836dfe6bc009ac9fe057c8f41cf17ea6b7214f", "2004": "bd69fcd14c7e28a4e257e6d72ca7eab8f03ab887", "2016": "5460447030b64b704da92375c8fe2fda9bd1c93a", "2021": "b95a57fbfa743d4622e7c591da07397b9d2793c3", "2024": "05d3c1c2f104964702a3599caeffbc4932d89b62", "2025": "a56f929c8606e3655de50e09c8fed374ee72218f", "2026": "d62350a1018193e0cf161f66187dc39bc9dc2250", "2027": "2abc0d93f58a25f31b758696f4eaa5655be47d4b", "2035": "629374cf0d1333e2f1c2f4fd38d2790d76f91911", "2037": "3c3cf911a2bca8f2ec67769eb1dc329f0e6f92f2", "2038": "f15760848bd6e8a5cf20d31b98dba5929f4eb3fc", "2061": "b04d7e51c4d4949534650878096669ac5a8f6c8f", "2064": "df38186962e92494b13cfa88bd26558ba73bc418", "2090": "84083b82e8ad40df67c74973ba716a1c679edd63", "2093": "2c634904a49d1deac5da67d03623d90fe166ef61", "2111": "2eaf0b914ceda32dcb89230ce08f3e3e24ff898e", "2112": "43470b0332f88907537707a90b638b9eb6ac25f1", "2113": "e9a421a602eec8ce73aed3ab5d101bfb255b2e86", "2115": "30e3e110324ea5ba1c5a797e9aac97f25d970a6b", "2125": "deddc52c06a2e08e460a44ff08c93a39cc1b2041", "2130": "f1b8cae5fc2704187b237ecad359d03e0300cacc", "2134": "34881b624afb7d612bb2341df6663b6d94f5d7c9", "2136": "2c59ffcf10044e404614ce5869c4de448a0fc015", "2139": "781d98f1427aca8860150eab8e63d2ad3d17ddc9", "2140": "a0dbb8e7aa1accdf2fe2d86db7878e68f940392e", "2141": "1654462d904a11b25a311d23f3fad20464be9600", "2145": "ecb08195f9792a60902bd81e545930ed0e033234", "2146": "fdf2cda8297c8c910912997afb46bc8493bbd37c", "2147": "90ca5b39b874caefff01a35d79431948543708eb", "2148": "fbd8a0809f7bd3c924a274f91f04fb928b5169b3", "2150": "172f8b3dddd3e0cd7373ca9420b4ddbdc87af037", "2163": "bd00cf0e317a262f9b5cc500a07505a8323bc792", "2192": "224b8755b1d85634a754756cd542e604dc4081fd", "2195": "814dccc41708bb74a70f59fb4d8e658a28bfba88", "2199": "45caa49767f0a654040f7d37a0f6dc82f94eadfc", "2208": "1cfa05e66c090ed6b57e7631b4935f2a7f5a6aad", "2217": "6b89d7c61e1695ae7f735977e91129d2fc029293", "2242": "9e08552f99f095737e282f66fc55308d286aee93", "2245": "dcff5b28f24305e6415addbc192ea5c122479f69", "2255": "a703db84fa19e5cfab452fb356855f6b25144d63", "2257": "66377b7f24732a578807ac5689df14ee131d49c8", "2259": "14b9881efeff0dae7bc11a8c64e6510ff765d03a", "2269": "2ac485c1a8118a99c591440970fba165d495b052", "2271": "3ba8596e7ceccfed7e4ecb89809aa491e05fa980", "2272": "b99dddd252a011a9e1e218bc502ba1eed7823422", "2276": "18c1f2cc84ebb6701bcad835f87af237b9e4d9c3", "2278": "db4436555a216077fb173bab34c72a6fdd7b4724", "2279": "67fcdecc181ffda514fbdf9498372df68405480c", "2280": "ac0c8c816e0730fc65e8fdb10ec3153ebbe071a3", "2283": "4d653dfb2c5e6f26bb5d7d5bcea59335a8572f8c", "2285": "8285dae0bdbc3e04db8c3fb842834d9556b30eb7", "2286": "7512ecede820e0d2bc7ad7b6704bcf06a861ca3a", "2288": "7bfdbb4e49c82c982f9c7f22de7b04ff19196d2e", "2292": "86f958946992360f810cea7fb3733d2b77ea0886", "2295": "762d92b07ab5788005c3b6e55f6420b0c85da748", "2299": "be538b02d50ec52fdfbe92188008c9a494651579", "2301": "5d7981bcd4cae5e99b11cdf3498128a719de2c2a", "2305": "532bd0cd0c361fd453d237989dd504a8ee0276ce", "2307": "2395b54d58081af6ec74d417bacd9b27e7922c26", "2308": "6e4e4a429d3b7f95aeefced45e14c1a9302a3f83", "2313": "93bdf392342e07dc8113e4597a5eb3e604bb2e32", "2335": "5786d09937d5ccf1787e058fa66ca3661ec523d0", "2336": "e4c7d6adc8475ad0bbd055d1e492b392b90583d2", "2337": "b2a5643723e5aafcb7e599680da40a02cea3bd12", "2338": "60906aaf637f45d1c8be8286357e9d0bfcde8a25", "2339": "cbb6c4b1bb8e7c2ed595441dac87ae0b6b303ef0", "2340": "b3e375aff078d81a48599209424801ee0d5931a2", "2341": "daae9cf6039c9f14f7cc3ddc56a252ee686722fc", "2348": "ce4df906765e8d6560c7ad36730608c8a8af2b22", "2349": "bb26a2949d82bf037c9cb5b2a04a6598893c039c", "2350": "e4c7af91a1b92918ed12145142f50c01ccb04dfc", "2351": "ea2ad477d9fe796c14a1b8c7a1d40d636ec30d4c", "2352": "3f855b6006a18f31d6d3d6b9ff2e9f9d68066b64", "2356": "a516653e284f4d349905587cbb7009d181b36b5a", "2360": "38da2dccf56ab6cf2bd85254b1ff5b90142b4032", "2362": "8a8dd842d45f0f21470505db2330519405e958da", "2363": "265175a9aeb7d7639b33e3724d0fca0b63d2c0ce", "2364": "7e9fae7711bb6da241edba9285f6616e8ae98770", "2365": "f2771983f4bf5ef3715b0e15c418b63cd7766aa0", "2366": "6652e0fbe2e919f3559c516f31fffca7565a8832", "2367": "e69ca89cae33c941417c66feef756b57337ae685", "2379": "573012584a19368b3813deae98a12835b84a586d", "2383": "5715ed558dbe1f976a452a632785c655d4fcf13b", "2386": "de5837287ac9991a2ab6494b7620a1ddafbe5667", "2392": "b78f265150f79de22c7c83979f8e532e43b85578", "2396": "f2d058fc91d94c2ae0b1e8a2fc52a527cbf00eb3", "2404": "7ef77e00236f3324c277c954b1efb00d4bcf9322", "2405": "0d95c93a969e45154383a1523842328de2cfbc1b", "2436": "1be928b3abb4156c1434f3999a3fc2bd8293f3f3", "2438": "c85e32ca93913ea35f39aaf8e88dccfdd872c25f", "2439": "aa90dfb275fd9d0dbd23ea00bcf2d524dec623a7", "2443": "7402cd093d3ffda86bfa5e9037a5df0ed5f0c041", "2444": "439c86ae229cd97c1e23c27e60d91f331d6a30fd", "2463": "8ac51d88def7e406bd77f5f96879ba3443cca5e2", "2468": "3e48572958b64561a7238b15279d949774b7c7f5", "2469": "9526eb46600fabeb6404803ccce35b4d54653dce", "2470": "70682d56dc4be2fa5b63f2aa687cf7f5bb9b0e37", "2477": "776e8ff5fc32eaf983c8af0529ffebd3f5b61a26", "2478": "53038b1962894469fcadbcd435e4f31468886f6c", "2479": "130ad57cb1d31bc4725c618d95e39468617316c3", "2486": "77d9da1d98310ffcf3e01d1cf2bf97107bf77b48", "2489": "fb4cfa205f6b6860f69980a91a8dbe85e7d0dd22", "2494": "aaebd94201097c9db33e6e5b425ad68ea37c9c96", "2495": "b2a95913b11f88ad1bae3b9684beecc3bb71b611", "2496": "21a515efefd5ffe2d250345a11d3e32f9a10dd74", "2497": "106a54c6bdb24df533ed99580b0159595f8e8e3c", "2500": "186839280d96ffb5455249056831443ea88dadf9", "2501": "61b028b7ccd1d6e96c8de48a10648c0bc3c07ff9", "2505": "a1aaac40f743c4ee5fefed8ed499f1a9c1106736", "2506": "a9cded6cf5dfed0bde375b035c0bd20bdfa2e857", "2508": "c6d6a961adb71f1faad9b296712f361a4120bd78", "2510": "5cd06ad8a1d14d3cc0823c407f640722940a61aa", "2513": "04ab1d57ad37686ec7b7a7e273330698a109fd6d", "2532": "693310bd1a2068349a2f4036812428c741220996", "2534": "893ff664f1d0c23863d6953e4630fe1d5faa28fc", "2535": "24c51a675b8653c8ad2af587d40b795ac94c07c7", "2539": "ed720996e0e50c2f6526977cf766dc36498f9aa5", "2556": "70214e30f30ff7664260c2a64d3fd54ce6fda7b4"}, "revision_to_date": {"344": 1545172957000, "398": 1548418657000, "633": 1556791972000, "648": 1558367972000, "718": 1562767035000, "723": 1562840310000, "785": 1566225533000, "823": 1571146657000, "831": 1571319355000, "868": 1573724643000, "925": 1575929488000, "1092": 1581007407000, "1148": 1583167120000, "1169": 1586464699000, "1215": 1587754364000, "1310": 1591047694000, "1395": 1596804967000, "1401": 1597057692000, "1500": 1602795431000, "1501": 1602854392000, "1507": 1603202963000, "1521": 1603826198000, "1522": 1603903801000, "1525": 1604094110000, "1527": 1604342587000, "1528": 1604350519000, "1529": 1604389614000, "1531": 1604501464000, "1532": 1604528892000, "1535": 1604534913000, "1538": 1604562018000, "1542": 1604656984000, "1550": 1605024841000, "1552": 1605042266000, "1553": 1605095732000, "1554": 1605106211000, "1558": 1605193059000, "1568": 1605210156000, "1571": 1605215129000, "1577": 1605532686000, "1578": 1605543797000, "1582": 1605629077000, "1586": 1605686407000, "1587": 1605691318000, "1588": 1605699319000, "1590": 1605720255000, "1592": 1605735717000, "1593": 1605782579000, "1607": 1606113861000, "1635": 1606202855000, "1638": 1606275392000, "1639": 1606292815000, "1644": 1606416273000, "1658": 1606904070000, "1661": 1606948259000, "1664": 1607004465000, "1666": 1607008061000, "1667": 1607013892000, "1670": 1607020897000, "1679": 1607467975000, "1680": 1607504867000, "1682": 1607583671000, "1683": 1607613270000, "1701": 1607721758000, "1705": 1607974187000, "1709": 1608044228000, "1711": 1608101962000, "1739": 1610440604000, "1740": 1610452231000, "1741": 1610467718000, "1743": 1610522368000, "1745": 1610621182000, "1746": 1610629682000, "1748": 1610724991000, "1752": 1610954268000, "1753": 1610957894000, "1754": 1610964244000, "1756": 1611070718000, "1757": 1611074816000, "1760": 1611127548000, "1762": 1611175905000, "1765": 1611336928000, "1768": 1611348017000, "1769": 1611358053000, "1783": 1611612450000, "1785": 1611656912000, "1789": 1611689871000, "1800": 1612377972000, "1801": 1612441487000, "1802": 1612445629000, "1810": 1612798651000, "1814": 1612941221000, "1815": 1612970456000, "1817": 1612989646000, "1818": 1613055983000, "1820": 1613077629000, "1830": 1613590829000, "1831": 1613624606000, "1832": 1613635945000, "1833": 1613640994000, "1834": 1613668028000, "1836": 1613668703000, "1838": 1613680025000, "1844": 1614019869000, "1846": 1614023619000, "1847": 1614026695000, "1851": 1614153016000, "1852": 1614172858000, "1854": 1614180195000, "1856": 1614219147000, "1857": 1614267073000, "1859": 1614357720000, "1860": 1614364663000, "1865": 1614713260000, "1866": 1614714340000, "1867": 1614719767000, "1868": 1614764905000, "1876": 1614873764000, "1880": 1614885445000, "1881": 1614886538000, "1882": 1614955007000, "1883": 1614966496000, "1885": 1614972697000, "1889": 1615236625000, "1891": 1615272204000, "1892": 1615272401000, "1894": 1615371466000, "1896": 1615388751000, "1903": 1615901699000, "1908": 1616051366000, "1910": 1616105050000, "1911": 1616105092000, "1924": 1616490755000, "1929": 1616620245000, "1930": 1616689457000, "1932": 1616775881000, "1941": 1617030217000, "1943": 1617058134000, "1945": 1617118761000, "1946": 1617120212000, "1948": 1617127248000, "1949": 1617139256000, "1950": 1617155600000, "1956": 1617214604000, "1957": 1617245275000, "1960": 1617305486000, "1964": 1617621708000, "1966": 1617699832000, "1975": 1617977684000, "1978": 1617999359000, "1979": 1617999452000, "1981": 1618017973000, "1985": 1618307906000, "1987": 1618406099000, "1996": 1618470661000, "1999": 1618501586000, "2004": 1618513844000, "2016": 1619188672000, "2021": 1619486159000, "2024": 1619629343000, "2025": 1619635920000, "2026": 1619640708000, "2027": 1619640927000, "2035": 1619714051000, "2037": 1619791543000, "2038": 1619796927000, "2061": 1620754433000, "2064": 1620990297000, "2090": 1623161068000, "2093": 1623331486000, "2111": 1623693443000, "2112": 1623699856000, "2113": 1623745559000, "2115": 1623782799000, "2125": 1624025397000, "2130": 1624039346000, "2134": 1624371113000, "2136": 1624397202000, "2139": 1624491332000, "2140": 1624495233000, "2141": 1624495264000, "2145": 1624580110000, "2146": 1624588260000, "2147": 1624588304000, "2148": 1624588334000, "2150": 1624631888000, "2163": 1625144241000, "2192": 1626261635000, "2195": 1626365143000, "2199": 1626377151000, "2208": 1626792227000, "2217": 1627307811000, "2242": 1628002078000, "2245": 1628180008000, "2255": 1628705283000, "2257": 1628772820000, "2259": 1628804883000, "2269": 1629214270000, "2271": 1629228628000, "2272": 1629238981000, "2276": 1629408501000, "2278": 1629408997000, "2279": 1629413589000, "2280": 1629472314000, "2283": 1629603062000, "2285": 1629727139000, "2286": 1629737873000, "2288": 1629757940000, "2292": 1629813533000, "2295": 1629853713000, "2299": 1629991376000, "2301": 1630000913000, "2305": 1630084638000, "2307": 1630089496000, "2308": 1630096666000, "2313": 1630341453000, "2335": 1631628559000, "2336": 1631650128000, "2337": 1631650358000, "2338": 1631675409000, "2339": 1631722523000, "2340": 1631730701000, "2341": 1631752791000, "2348": 1632319357000, "2349": 1632327902000, "2350": 1632408681000, "2351": 1632418900000, "2352": 1632440401000, "2356": 1632491959000, "2360": 1632857157000, "2362": 1633446328000, "2363": 1633563073000, "2364": 1633622798000, "2365": 1633638259000, "2366": 1633646036000, "2367": 1633651514000, "2379": 1633656427000, "2383": 1633979227000, "2386": 1633984643000, "2392": 1635285665000, "2396": 1635779869000, "2404": 1636117419000, "2405": 1636397645000, "2436": 1637165864000, "2438": 1637179996000, "2439": 1637186811000, "2443": 1637251380000, "2444": 1637262235000, "2463": 1638369689000, "2468": 1638741312000, "2469": 1638756064000, "2470": 1638802084000, "2477": 1638897784000, "2478": 1639004628000, "2479": 1639010138000, "2486": 1639161989000, "2489": 1639171761000, "2494": 1639409460000, "2495": 1639412784000, "2496": 1639417396000, "2497": 1639417513000, "2500": 1639499022000, "2501": 1639503620000, "2505": 1639669799000, "2506": 1639682907000, "2508": 1639687678000, "2510": 1639757519000, "2513": 1639763126000, "2532": 1641315866000, "2534": 1641322544000, "2535": 1641333376000, "2539": 1641403681000, "2556": 1643408000000}, "params": {"arch": ["x86_64"], "cpu": ["Intel(R) Xeon(R) Gold 6140 CPU @ 2.30GHz"], "machine": ["s7f-quantum"], "num_cpu": ["72"], "os": ["Linux 4.15.0-65-generic"], "ram": ["394857468"], "python": ["3.8"], "branch": ["main"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "Intel(R) Xeon(R) Gold 6140 CPU @ 2.30GHz", "machine": "s7f-quantum", "num_cpu": "72", "os": "Linux 4.15.0-65-generic", "ram": "394857468", "python": "3.8", "branch": "main"}], "benchmarks": {"default_simulator.Benchmark.track_qft": {"code": "class Benchmark:\n    def track_qft(self, qubit):\n        \"\"\"simulation time of QFT\"\"\"\n        return self._track(QFT(qubit))", "name": "default_simulator.Benchmark.track_qft", "param_names": ["qubits"], "params": [["5", "15", "25"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "c3dfddacec0ce86b1c896f6da241c4cd962fa7ef5b14061a87088bef8b72f7fb"}, "default_simulator.Benchmark.track_qv": {"code": "class Benchmark:\n    def track_qv(self, qubit):\n        \"\"\"simulation time of QuantumVolume\"\"\"\n        return self._track(QuantumVolume(qubit))", "name": "default_simulator.Benchmark.track_qv", "param_names": ["qubits"], "params": [["5", "15", "25"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "acee30c375289ab8b13fd006878a17f25c55db947ee38d1b51739ea97395f393"}, "default_simulator.Benchmark.track_real_amplitudes": {"code": "class Benchmark:\n    def track_real_amplitudes(self, qubit):\n        \"\"\"simulation time of RealAmplitudes\"\"\"\n        return self._track(RealAmplitudes(qubit))", "name": "default_simulator.Benchmark.track_real_amplitudes", "param_names": ["qubits"], "params": [["5", "15", "25"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "23e553ad8daacb71ae3ff82b69f29e3c4c784a6350c7600e88d062a22ab92003"}, "default_simulator.Benchmark.track_real_amplitudes_full": {"code": "class Benchmark:\n    def track_real_amplitudes_full(self, qubit):\n        \"\"\"simulation time of RealAmplitudes\"\"\"\n        return self._track(RealAmplitudes(qubit, entanglement='full'))", "name": "default_simulator.Benchmark.track_real_amplitudes_full", "param_names": ["qubits"], "params": [["5", "15", "25"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "deaba9296a9da8e196c78d51ff5ca943f257c888540ba5576b2a585c192226ec"}, "default_simulator.ExpVal.track_expval": {"code": "class ExpVal:\n    def track_expval(self, qubit):\n        \"\"\"track only time to calculate expectation values of RealAmplitudes with 1K pauli-strings\"\"\"\n        terms = 1000\n        circuit = QuantumCircuit(qubit)\n        for i in range(qubit):\n            circuit.h(i)\n    \n        rng = np.random.default_rng(1)\n        pauli_strings = [''.join(s) for s in rng.choice(['I', 'X', 'Y', 'Z'], size=(terms, qubit))]\n        try:\n            op = None\n            for pauli_string in pauli_strings:\n                if op is None:\n                    op = 1 / terms * qi.SparsePauliOp(pauli_string)\n                else:\n                    op += 1 / terms * qi.SparsePauliOp(pauli_string)\n            circuit.save_expectation_value(op, range(qubit))\n        except:\n            from qiskit.providers.aer.extensions import snapshot_expectation_value\n            circuit.snapshot_expectation_value('expval', [(1/terms, pauli) for pauli in pauli_strings], range(qubit))\n    \n        start_ts = time()\n        result = self._run(circuit)\n        end_ts = time()\n        if not result.success:\n            raise ValueError(result.status)\n    \n        return end_ts - start_ts", "name": "default_simulator.ExpVal.track_expval", "param_names": ["qubits"], "params": [["10", "15", "25"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "7f109e6e5c5ee6682cd74f42db68703d60be7286369f4e3e953c648e23adc873"}, "default_simulator.ExpVal.track_expval_var": {"code": "class ExpVal:\n    def track_expval_var(self, qubit):\n        \"\"\"track only time to calculate expectation value variances of RealAmplitudes with 100 pauli-strings\"\"\"\n    \n        terms = 100\n        circuit = QuantumCircuit(qubit)\n        for i in range(qubit):\n            circuit.h(i)\n    \n        rng = np.random.default_rng(1)\n        pauli_strings = [''.join(s) for s in rng.choice(['I', 'X', 'Y', 'Z'], size=(terms, qubit))]\n        try:\n            op = None\n            for pauli_string in pauli_strings:\n                if op is None:\n                    op = rng.random() * qi.SparsePauliOp(pauli_string)\n                else:\n                    op += rng.random() * qi.SparsePauliOp(pauli_string)\n            circuit.save_expectation_value_variance(op, range(qubit))\n        except:\n            raise ValueError('no save_expectation_value_variance')\n    \n        start_ts = time()\n        result = self._run(circuit)\n        end_ts = time()\n        if not result.success:\n            raise ValueError(result.status)\n        return end_ts - start_ts", "name": "default_simulator.ExpVal.track_expval_var", "param_names": ["qubits"], "params": [["10", "15", "25"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "83923e073a5341551ad6fb0ebf586c128d58bffefc4e328c0f2a727e6c33ea02"}, "default_simulator.Noise.track_amplitude_damping_error": {"code": "class Noise:\n    def track_amplitude_damping_error(self, qubit):\n        \"\"\"track only time to simulate quantum volume transpiled with basis gates U and CX with amplitude damping error\"\"\"\n        circuit = QuantumVolume(qubit)\n        circuit.measure_all()\n    \n        circuit = transpile(circuit, self.simulator(), basis_gates=['u', 'cx'])\n    \n        noise_model = NoiseModel()\n        noise_model.add_all_qubit_quantum_error(amplitude_damping_error(1e-3), 'u')\n        cx_error = amplitude_damping_error(1e-2)\n        cx_error = cx_error.tensor(cx_error)\n        noise_model.add_all_qubit_quantum_error(cx_error, 'cx')\n    \n        start_ts = time()\n        result = self._run(circuit, noise_model=noise_model)\n        end_ts = time()\n        if not result.success:\n            raise ValueError(result.status)\n    \n        return end_ts - start_ts", "name": "default_simulator.Noise.track_amplitude_damping_error", "param_names": ["qubits"], "params": [["10", "15"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "1ae537b10bcaaa212ad175fb18f5879215df3038db7b6e18acace71c2e83d1b9"}, "default_simulator.Noise.track_depolarizing_error": {"code": "class Noise:\n    def track_depolarizing_error(self, qubit):\n        \"\"\"track only time to simulate quantum volume transpiled with basis gates U and CX with depolarizing error\"\"\"\n        circuit = QuantumVolume(qubit)\n        circuit.measure_all()\n    \n        circuit = transpile(circuit, self.simulator(), basis_gates=['u', 'cx'])\n    \n        noise_model = NoiseModel()\n        noise_model.add_all_qubit_quantum_error(depolarizing_error(1e-3, 1), ['u'])\n        noise_model.add_all_qubit_quantum_error(depolarizing_error(1e-2, 2), ['cx'])\n    \n        start_ts = time()\n        result = self._run(circuit, noise_model=noise_model)\n        end_ts = time()\n        if not result.success:\n            raise ValueError(result.status)\n    \n        return end_ts - start_ts", "name": "default_simulator.Noise.track_depolarizing_error", "param_names": ["qubits"], "params": [["10", "15"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "c1d9e9bf64f849460d30e28d7d07e7460dd942516fb530d20823269d86a90349"}, "default_simulator.Noise.track_readout_error": {"code": "class Noise:\n    def track_readout_error(self, qubit):\n        \"\"\"track only time to simulate quantum volume transpiled with basis gates U and CX with amplitude damping error\"\"\"\n        circuit = QuantumVolume(qubit)\n        circuit.measure_all()\n    \n        circuit = transpile(circuit, self.simulator())\n    \n        readout_error = [0.01, 0.1]\n        noise_model = NoiseModel()\n        readout = [[1.0 - readout_error[0], readout_error[0]],\n                   [readout_error[1], 1.0 - readout_error[1]]]\n        noise_model.add_all_qubit_readout_error(ReadoutError(readout))\n    \n        start_ts = time()\n        result = self._run(circuit, noise_model=noise_model)\n        end_ts = time()\n        if not result.success:\n            raise ValueError(result.status)\n    \n        return end_ts - start_ts", "name": "default_simulator.Noise.track_readout_error", "param_names": ["qubits"], "params": [["10", "15"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "7ed34efcc3cb32bf896adda8e7944f30bf130b39b67a15730e301af2ec7d4a4c"}, "densitymatrix_cpu.Benchmark.track_qft": {"code": "class Benchmark:\n    def track_qft(self, qubit):\n        \"\"\"simulation time of QFT\"\"\"\n        return self._track(QFT(qubit))", "name": "densitymatrix_cpu.Benchmark.track_qft", "param_names": ["qubits"], "params": [["5", "13"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "c3dfddacec0ce86b1c896f6da241c4cd962fa7ef5b14061a87088bef8b72f7fb"}, "densitymatrix_cpu.Benchmark.track_qv": {"code": "class Benchmark:\n    def track_qv(self, qubit):\n        \"\"\"simulation time of QuantumVolume\"\"\"\n        return self._track(QuantumVolume(qubit))", "name": "densitymatrix_cpu.Benchmark.track_qv", "param_names": ["qubits"], "params": [["5", "13"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "acee30c375289ab8b13fd006878a17f25c55db947ee38d1b51739ea97395f393"}, "densitymatrix_cpu.Benchmark.track_real_amplitudes": {"code": "class Benchmark:\n    def track_real_amplitudes(self, qubit):\n        \"\"\"simulation time of RealAmplitudes\"\"\"\n        return self._track(RealAmplitudes(qubit))", "name": "densitymatrix_cpu.Benchmark.track_real_amplitudes", "param_names": ["qubits"], "params": [["5", "13"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "23e553ad8daacb71ae3ff82b69f29e3c4c784a6350c7600e88d062a22ab92003"}, "densitymatrix_cpu.Benchmark.track_real_amplitudes_full": {"code": "class Benchmark:\n    def track_real_amplitudes_full(self, qubit):\n        \"\"\"simulation time of RealAmplitudes\"\"\"\n        return self._track(RealAmplitudes(qubit, entanglement='full'))", "name": "densitymatrix_cpu.Benchmark.track_real_amplitudes_full", "param_names": ["qubits"], "params": [["5", "13"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "deaba9296a9da8e196c78d51ff5ca943f257c888540ba5576b2a585c192226ec"}, "densitymatrix_cpu.ExpVal.track_expval": {"code": "class ExpVal:\n    def track_expval(self, qubit):\n        \"\"\"track only time to calculate expectation values of RealAmplitudes with 1K pauli-strings\"\"\"\n        terms = 1000\n        circuit = QuantumCircuit(qubit)\n        for i in range(qubit):\n            circuit.h(i)\n    \n        rng = np.random.default_rng(1)\n        pauli_strings = [''.join(s) for s in rng.choice(['I', 'X', 'Y', 'Z'], size=(terms, qubit))]\n        try:\n            op = None\n            for pauli_string in pauli_strings:\n                if op is None:\n                    op = 1 / terms * qi.SparsePauliOp(pauli_string)\n                else:\n                    op += 1 / terms * qi.SparsePauliOp(pauli_string)\n            circuit.save_expectation_value(op, range(qubit))\n        except:\n            from qiskit.providers.aer.extensions import snapshot_expectation_value\n            circuit.snapshot_expectation_value('expval', [(1/terms, pauli) for pauli in pauli_strings], range(qubit))\n    \n        start_ts = time()\n        result = self._run(circuit)\n        end_ts = time()\n        if not result.success:\n            raise ValueError(result.status)\n    \n        return end_ts - start_ts", "name": "densitymatrix_cpu.ExpVal.track_expval", "param_names": ["qubits"], "params": [["5", "13"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "7f109e6e5c5ee6682cd74f42db68703d60be7286369f4e3e953c648e23adc873"}, "densitymatrix_cpu.ExpVal.track_expval_var": {"code": "class ExpVal:\n    def track_expval_var(self, qubit):\n        \"\"\"track only time to calculate expectation value variances of RealAmplitudes with 100 pauli-strings\"\"\"\n    \n        terms = 100\n        circuit = QuantumCircuit(qubit)\n        for i in range(qubit):\n            circuit.h(i)\n    \n        rng = np.random.default_rng(1)\n        pauli_strings = [''.join(s) for s in rng.choice(['I', 'X', 'Y', 'Z'], size=(terms, qubit))]\n        try:\n            op = None\n            for pauli_string in pauli_strings:\n                if op is None:\n                    op = rng.random() * qi.SparsePauliOp(pauli_string)\n                else:\n                    op += rng.random() * qi.SparsePauliOp(pauli_string)\n            circuit.save_expectation_value_variance(op, range(qubit))\n        except:\n            raise ValueError('no save_expectation_value_variance')\n    \n        start_ts = time()\n        result = self._run(circuit)\n        end_ts = time()\n        if not result.success:\n            raise ValueError(result.status)\n        return end_ts - start_ts", "name": "densitymatrix_cpu.ExpVal.track_expval_var", "param_names": ["qubits"], "params": [["5", "13"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "83923e073a5341551ad6fb0ebf586c128d58bffefc4e328c0f2a727e6c33ea02"}, "densitymatrix_cpu.Noise.track_amplitude_damping_error": {"code": "class Noise:\n    def track_amplitude_damping_error(self, qubit):\n        \"\"\"track only time to simulate quantum volume transpiled with basis gates U and CX with amplitude damping error\"\"\"\n        circuit = QuantumVolume(qubit)\n        circuit.measure_all()\n    \n        circuit = transpile(circuit, self.simulator(), basis_gates=['u', 'cx'])\n    \n        noise_model = NoiseModel()\n        noise_model.add_all_qubit_quantum_error(amplitude_damping_error(1e-3), 'u')\n        cx_error = amplitude_damping_error(1e-2)\n        cx_error = cx_error.tensor(cx_error)\n        noise_model.add_all_qubit_quantum_error(cx_error, 'cx')\n    \n        start_ts = time()\n        result = self._run(circuit, noise_model=noise_model)\n        end_ts = time()\n        if not result.success:\n            raise ValueError(result.status)\n    \n        return end_ts - start_ts", "name": "densitymatrix_cpu.Noise.track_amplitude_damping_error", "param_names": ["qubits"], "params": [["5", "13"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "1ae537b10bcaaa212ad175fb18f5879215df3038db7b6e18acace71c2e83d1b9"}, "densitymatrix_cpu.Noise.track_depolarizing_error": {"code": "class Noise:\n    def track_depolarizing_error(self, qubit):\n        \"\"\"track only time to simulate quantum volume transpiled with basis gates U and CX with depolarizing error\"\"\"\n        circuit = QuantumVolume(qubit)\n        circuit.measure_all()\n    \n        circuit = transpile(circuit, self.simulator(), basis_gates=['u', 'cx'])\n    \n        noise_model = NoiseModel()\n        noise_model.add_all_qubit_quantum_error(depolarizing_error(1e-3, 1), ['u'])\n        noise_model.add_all_qubit_quantum_error(depolarizing_error(1e-2, 2), ['cx'])\n    \n        start_ts = time()\n        result = self._run(circuit, noise_model=noise_model)\n        end_ts = time()\n        if not result.success:\n            raise ValueError(result.status)\n    \n        return end_ts - start_ts", "name": "densitymatrix_cpu.Noise.track_depolarizing_error", "param_names": ["qubits"], "params": [["5", "13"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "c1d9e9bf64f849460d30e28d7d07e7460dd942516fb530d20823269d86a90349"}, "densitymatrix_cpu.Noise.track_readout_error": {"code": "class Noise:\n    def track_readout_error(self, qubit):\n        \"\"\"track only time to simulate quantum volume transpiled with basis gates U and CX with amplitude damping error\"\"\"\n        circuit = QuantumVolume(qubit)\n        circuit.measure_all()\n    \n        circuit = transpile(circuit, self.simulator())\n    \n        readout_error = [0.01, 0.1]\n        noise_model = NoiseModel()\n        readout = [[1.0 - readout_error[0], readout_error[0]],\n                   [readout_error[1], 1.0 - readout_error[1]]]\n        noise_model.add_all_qubit_readout_error(ReadoutError(readout))\n    \n        start_ts = time()\n        result = self._run(circuit, noise_model=noise_model)\n        end_ts = time()\n        if not result.success:\n            raise ValueError(result.status)\n    \n        return end_ts - start_ts", "name": "densitymatrix_cpu.Noise.track_readout_error", "param_names": ["qubits"], "params": [["5", "13"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "7ed34efcc3cb32bf896adda8e7944f30bf130b39b67a15730e301af2ec7d4a4c"}, "densitymatrix_gpu.Benchmark.track_qft": {"code": "class Benchmark:\n    def track_qft(self, qubit):\n        \"\"\"simulation time of QFT\"\"\"\n        return self._track(QFT(qubit))", "name": "densitymatrix_gpu.Benchmark.track_qft", "param_names": ["qubits"], "params": [["5", "13"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "c3dfddacec0ce86b1c896f6da241c4cd962fa7ef5b14061a87088bef8b72f7fb"}, "densitymatrix_gpu.Benchmark.track_qv": {"code": "class Benchmark:\n    def track_qv(self, qubit):\n        \"\"\"simulation time of QuantumVolume\"\"\"\n        return self._track(QuantumVolume(qubit))", "name": "densitymatrix_gpu.Benchmark.track_qv", "param_names": ["qubits"], "params": [["5", "13"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "acee30c375289ab8b13fd006878a17f25c55db947ee38d1b51739ea97395f393"}, "densitymatrix_gpu.Benchmark.track_real_amplitudes": {"code": "class Benchmark:\n    def track_real_amplitudes(self, qubit):\n        \"\"\"simulation time of RealAmplitudes\"\"\"\n        return self._track(RealAmplitudes(qubit))", "name": "densitymatrix_gpu.Benchmark.track_real_amplitudes", "param_names": ["qubits"], "params": [["5", "13"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "23e553ad8daacb71ae3ff82b69f29e3c4c784a6350c7600e88d062a22ab92003"}, "densitymatrix_gpu.Benchmark.track_real_amplitudes_full": {"code": "class Benchmark:\n    def track_real_amplitudes_full(self, qubit):\n        \"\"\"simulation time of RealAmplitudes\"\"\"\n        return self._track(RealAmplitudes(qubit, entanglement='full'))", "name": "densitymatrix_gpu.Benchmark.track_real_amplitudes_full", "param_names": ["qubits"], "params": [["5", "13"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "deaba9296a9da8e196c78d51ff5ca943f257c888540ba5576b2a585c192226ec"}, "densitymatrix_gpu.ExpVal.track_expval": {"code": "class ExpVal:\n    def track_expval(self, qubit):\n        \"\"\"track only time to calculate expectation values of RealAmplitudes with 1K pauli-strings\"\"\"\n        terms = 1000\n        circuit = QuantumCircuit(qubit)\n        for i in range(qubit):\n            circuit.h(i)\n    \n        rng = np.random.default_rng(1)\n        pauli_strings = [''.join(s) for s in rng.choice(['I', 'X', 'Y', 'Z'], size=(terms, qubit))]\n        try:\n            op = None\n            for pauli_string in pauli_strings:\n                if op is None:\n                    op = 1 / terms * qi.SparsePauliOp(pauli_string)\n                else:\n                    op += 1 / terms * qi.SparsePauliOp(pauli_string)\n            circuit.save_expectation_value(op, range(qubit))\n        except:\n            from qiskit.providers.aer.extensions import snapshot_expectation_value\n            circuit.snapshot_expectation_value('expval', [(1/terms, pauli) for pauli in pauli_strings], range(qubit))\n    \n        start_ts = time()\n        result = self._run(circuit)\n        end_ts = time()\n        if not result.success:\n            raise ValueError(result.status)\n    \n        return end_ts - start_ts", "name": "densitymatrix_gpu.ExpVal.track_expval", "param_names": ["qubits"], "params": [["5", "13"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "7f109e6e5c5ee6682cd74f42db68703d60be7286369f4e3e953c648e23adc873"}, "densitymatrix_gpu.ExpVal.track_expval_var": {"code": "class ExpVal:\n    def track_expval_var(self, qubit):\n        \"\"\"track only time to calculate expectation value variances of RealAmplitudes with 100 pauli-strings\"\"\"\n    \n        terms = 100\n        circuit = QuantumCircuit(qubit)\n        for i in range(qubit):\n            circuit.h(i)\n    \n        rng = np.random.default_rng(1)\n        pauli_strings = [''.join(s) for s in rng.choice(['I', 'X', 'Y', 'Z'], size=(terms, qubit))]\n        try:\n            op = None\n            for pauli_string in pauli_strings:\n                if op is None:\n                    op = rng.random() * qi.SparsePauliOp(pauli_string)\n                else:\n                    op += rng.random() * qi.SparsePauliOp(pauli_string)\n            circuit.save_expectation_value_variance(op, range(qubit))\n        except:\n            raise ValueError('no save_expectation_value_variance')\n    \n        start_ts = time()\n        result = self._run(circuit)\n        end_ts = time()\n        if not result.success:\n            raise ValueError(result.status)\n        return end_ts - start_ts", "name": "densitymatrix_gpu.ExpVal.track_expval_var", "param_names": ["qubits"], "params": [["5", "13"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "83923e073a5341551ad6fb0ebf586c128d58bffefc4e328c0f2a727e6c33ea02"}, "densitymatrix_gpu.Noise.track_amplitude_damping_error": {"code": "class Noise:\n    def track_amplitude_damping_error(self, qubit):\n        \"\"\"track only time to simulate quantum volume transpiled with basis gates U and CX with amplitude damping error\"\"\"\n        circuit = QuantumVolume(qubit)\n        circuit.measure_all()\n    \n        circuit = transpile(circuit, self.simulator(), basis_gates=['u', 'cx'])\n    \n        noise_model = NoiseModel()\n        noise_model.add_all_qubit_quantum_error(amplitude_damping_error(1e-3), 'u')\n        cx_error = amplitude_damping_error(1e-2)\n        cx_error = cx_error.tensor(cx_error)\n        noise_model.add_all_qubit_quantum_error(cx_error, 'cx')\n    \n        start_ts = time()\n        result = self._run(circuit, noise_model=noise_model)\n        end_ts = time()\n        if not result.success:\n            raise ValueError(result.status)\n    \n        return end_ts - start_ts", "name": "densitymatrix_gpu.Noise.track_amplitude_damping_error", "param_names": ["qubits"], "params": [["5", "13"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "1ae537b10bcaaa212ad175fb18f5879215df3038db7b6e18acace71c2e83d1b9"}, "densitymatrix_gpu.Noise.track_depolarizing_error": {"code": "class Noise:\n    def track_depolarizing_error(self, qubit):\n        \"\"\"track only time to simulate quantum volume transpiled with basis gates U and CX with depolarizing error\"\"\"\n        circuit = QuantumVolume(qubit)\n        circuit.measure_all()\n    \n        circuit = transpile(circuit, self.simulator(), basis_gates=['u', 'cx'])\n    \n        noise_model = NoiseModel()\n        noise_model.add_all_qubit_quantum_error(depolarizing_error(1e-3, 1), ['u'])\n        noise_model.add_all_qubit_quantum_error(depolarizing_error(1e-2, 2), ['cx'])\n    \n        start_ts = time()\n        result = self._run(circuit, noise_model=noise_model)\n        end_ts = time()\n        if not result.success:\n            raise ValueError(result.status)\n    \n        return end_ts - start_ts", "name": "densitymatrix_gpu.Noise.track_depolarizing_error", "param_names": ["qubits"], "params": [["5", "13"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "c1d9e9bf64f849460d30e28d7d07e7460dd942516fb530d20823269d86a90349"}, "densitymatrix_gpu.Noise.track_readout_error": {"code": "class Noise:\n    def track_readout_error(self, qubit):\n        \"\"\"track only time to simulate quantum volume transpiled with basis gates U and CX with amplitude damping error\"\"\"\n        circuit = QuantumVolume(qubit)\n        circuit.measure_all()\n    \n        circuit = transpile(circuit, self.simulator())\n    \n        readout_error = [0.01, 0.1]\n        noise_model = NoiseModel()\n        readout = [[1.0 - readout_error[0], readout_error[0]],\n                   [readout_error[1], 1.0 - readout_error[1]]]\n        noise_model.add_all_qubit_readout_error(ReadoutError(readout))\n    \n        start_ts = time()\n        result = self._run(circuit, noise_model=noise_model)\n        end_ts = time()\n        if not result.success:\n            raise ValueError(result.status)\n    \n        return end_ts - start_ts", "name": "densitymatrix_gpu.Noise.track_readout_error", "param_names": ["qubits"], "params": [["5", "13"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "7ed34efcc3cb32bf896adda8e7944f30bf130b39b67a15730e301af2ec7d4a4c"}, "mps_cpu.Benchmark.track_qft": {"code": "class Benchmark:\n    def track_qft(self, qubit):\n        \"\"\"simulation time of QFT\"\"\"\n        return self._track(QFT(qubit))", "name": "mps_cpu.Benchmark.track_qft", "param_names": ["qubits"], "params": [["5", "15", "20"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "c3dfddacec0ce86b1c896f6da241c4cd962fa7ef5b14061a87088bef8b72f7fb"}, "mps_cpu.Benchmark.track_qv": {"code": "class Benchmark:\n    def track_qv(self, qubit):\n        \"\"\"simulation time of QuantumVolume\"\"\"\n        return self._track(QuantumVolume(qubit))", "name": "mps_cpu.Benchmark.track_qv", "param_names": ["qubits"], "params": [["5", "15", "20"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "acee30c375289ab8b13fd006878a17f25c55db947ee38d1b51739ea97395f393"}, "mps_cpu.Benchmark.track_real_amplitudes": {"code": "class Benchmark:\n    def track_real_amplitudes(self, qubit):\n        \"\"\"simulation time of RealAmplitudes\"\"\"\n        return self._track(RealAmplitudes(qubit))", "name": "mps_cpu.Benchmark.track_real_amplitudes", "param_names": ["qubits"], "params": [["5", "15", "20"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "23e553ad8daacb71ae3ff82b69f29e3c4c784a6350c7600e88d062a22ab92003"}, "mps_cpu.Benchmark.track_real_amplitudes_full": {"code": "class Benchmark:\n    def track_real_amplitudes_full(self, qubit):\n        \"\"\"simulation time of RealAmplitudes\"\"\"\n        return self._track(RealAmplitudes(qubit, entanglement='full'))", "name": "mps_cpu.Benchmark.track_real_amplitudes_full", "param_names": ["qubits"], "params": [["5", "15", "20"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "deaba9296a9da8e196c78d51ff5ca943f257c888540ba5576b2a585c192226ec"}, "mps_cpu.ExpVal.track_expval": {"code": "class ExpVal:\n    def track_expval(self, qubit):\n        \"\"\"track only time to calculate expectation values of RealAmplitudes with 1K pauli-strings\"\"\"\n        terms = 1000\n        circuit = QuantumCircuit(qubit)\n        for i in range(qubit):\n            circuit.h(i)\n    \n        rng = np.random.default_rng(1)\n        pauli_strings = [''.join(s) for s in rng.choice(['I', 'X', 'Y', 'Z'], size=(terms, qubit))]\n        try:\n            op = None\n            for pauli_string in pauli_strings:\n                if op is None:\n                    op = 1 / terms * qi.SparsePauliOp(pauli_string)\n                else:\n                    op += 1 / terms * qi.SparsePauliOp(pauli_string)\n            circuit.save_expectation_value(op, range(qubit))\n        except:\n            from qiskit.providers.aer.extensions import snapshot_expectation_value\n            circuit.snapshot_expectation_value('expval', [(1/terms, pauli) for pauli in pauli_strings], range(qubit))\n    \n        start_ts = time()\n        result = self._run(circuit)\n        end_ts = time()\n        if not result.success:\n            raise ValueError(result.status)\n    \n        return end_ts - start_ts", "name": "mps_cpu.ExpVal.track_expval", "param_names": ["qubits"], "params": [["5", "15", "20"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "7f109e6e5c5ee6682cd74f42db68703d60be7286369f4e3e953c648e23adc873"}, "mps_cpu.ExpVal.track_expval_var": {"code": "class ExpVal:\n    def track_expval_var(self, qubit):\n        \"\"\"track only time to calculate expectation value variances of RealAmplitudes with 100 pauli-strings\"\"\"\n    \n        terms = 100\n        circuit = QuantumCircuit(qubit)\n        for i in range(qubit):\n            circuit.h(i)\n    \n        rng = np.random.default_rng(1)\n        pauli_strings = [''.join(s) for s in rng.choice(['I', 'X', 'Y', 'Z'], size=(terms, qubit))]\n        try:\n            op = None\n            for pauli_string in pauli_strings:\n                if op is None:\n                    op = rng.random() * qi.SparsePauliOp(pauli_string)\n                else:\n                    op += rng.random() * qi.SparsePauliOp(pauli_string)\n            circuit.save_expectation_value_variance(op, range(qubit))\n        except:\n            raise ValueError('no save_expectation_value_variance')\n    \n        start_ts = time()\n        result = self._run(circuit)\n        end_ts = time()\n        if not result.success:\n            raise ValueError(result.status)\n        return end_ts - start_ts", "name": "mps_cpu.ExpVal.track_expval_var", "param_names": ["qubits"], "params": [["5", "15", "20"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "83923e073a5341551ad6fb0ebf586c128d58bffefc4e328c0f2a727e6c33ea02"}, "mps_cpu.Noise.track_amplitude_damping_error": {"code": "class Noise:\n    def track_amplitude_damping_error(self, qubit):\n        \"\"\"track only time to simulate quantum volume transpiled with basis gates U and CX with amplitude damping error\"\"\"\n        circuit = QuantumVolume(qubit)\n        circuit.measure_all()\n    \n        circuit = transpile(circuit, self.simulator(), basis_gates=['u', 'cx'])\n    \n        noise_model = NoiseModel()\n        noise_model.add_all_qubit_quantum_error(amplitude_damping_error(1e-3), 'u')\n        cx_error = amplitude_damping_error(1e-2)\n        cx_error = cx_error.tensor(cx_error)\n        noise_model.add_all_qubit_quantum_error(cx_error, 'cx')\n    \n        start_ts = time()\n        result = self._run(circuit, noise_model=noise_model)\n        end_ts = time()\n        if not result.success:\n            raise ValueError(result.status)\n    \n        return end_ts - start_ts", "name": "mps_cpu.Noise.track_amplitude_damping_error", "param_names": ["qubits"], "params": [["5", "15"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "1ae537b10bcaaa212ad175fb18f5879215df3038db7b6e18acace71c2e83d1b9"}, "mps_cpu.Noise.track_depolarizing_error": {"code": "class Noise:\n    def track_depolarizing_error(self, qubit):\n        \"\"\"track only time to simulate quantum volume transpiled with basis gates U and CX with depolarizing error\"\"\"\n        circuit = QuantumVolume(qubit)\n        circuit.measure_all()\n    \n        circuit = transpile(circuit, self.simulator(), basis_gates=['u', 'cx'])\n    \n        noise_model = NoiseModel()\n        noise_model.add_all_qubit_quantum_error(depolarizing_error(1e-3, 1), ['u'])\n        noise_model.add_all_qubit_quantum_error(depolarizing_error(1e-2, 2), ['cx'])\n    \n        start_ts = time()\n        result = self._run(circuit, noise_model=noise_model)\n        end_ts = time()\n        if not result.success:\n            raise ValueError(result.status)\n    \n        return end_ts - start_ts", "name": "mps_cpu.Noise.track_depolarizing_error", "param_names": ["qubits"], "params": [["5", "15"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "c1d9e9bf64f849460d30e28d7d07e7460dd942516fb530d20823269d86a90349"}, "mps_cpu.Noise.track_readout_error": {"code": "class Noise:\n    def track_readout_error(self, qubit):\n        \"\"\"track only time to simulate quantum volume transpiled with basis gates U and CX with amplitude damping error\"\"\"\n        circuit = QuantumVolume(qubit)\n        circuit.measure_all()\n    \n        circuit = transpile(circuit, self.simulator())\n    \n        readout_error = [0.01, 0.1]\n        noise_model = NoiseModel()\n        readout = [[1.0 - readout_error[0], readout_error[0]],\n                   [readout_error[1], 1.0 - readout_error[1]]]\n        noise_model.add_all_qubit_readout_error(ReadoutError(readout))\n    \n        start_ts = time()\n        result = self._run(circuit, noise_model=noise_model)\n        end_ts = time()\n        if not result.success:\n            raise ValueError(result.status)\n    \n        return end_ts - start_ts", "name": "mps_cpu.Noise.track_readout_error", "param_names": ["qubits"], "params": [["5", "15"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "7ed34efcc3cb32bf896adda8e7944f30bf130b39b67a15730e301af2ec7d4a4c"}, "statevector_cpu.Benchmark.track_qft": {"code": "class Benchmark:\n    def track_qft(self, qubit):\n        \"\"\"simulation time of QFT\"\"\"\n        return self._track(QFT(qubit))", "name": "statevector_cpu.Benchmark.track_qft", "param_names": ["qubits"], "params": [["5", "15", "25"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "c3dfddacec0ce86b1c896f6da241c4cd962fa7ef5b14061a87088bef8b72f7fb"}, "statevector_cpu.Benchmark.track_qv": {"code": "class Benchmark:\n    def track_qv(self, qubit):\n        \"\"\"simulation time of QuantumVolume\"\"\"\n        return self._track(QuantumVolume(qubit))", "name": "statevector_cpu.Benchmark.track_qv", "param_names": ["qubits"], "params": [["5", "15", "25"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "acee30c375289ab8b13fd006878a17f25c55db947ee38d1b51739ea97395f393"}, "statevector_cpu.Benchmark.track_real_amplitudes": {"code": "class Benchmark:\n    def track_real_amplitudes(self, qubit):\n        \"\"\"simulation time of RealAmplitudes\"\"\"\n        return self._track(RealAmplitudes(qubit))", "name": "statevector_cpu.Benchmark.track_real_amplitudes", "param_names": ["qubits"], "params": [["5", "15", "25"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "23e553ad8daacb71ae3ff82b69f29e3c4c784a6350c7600e88d062a22ab92003"}, "statevector_cpu.Benchmark.track_real_amplitudes_full": {"code": "class Benchmark:\n    def track_real_amplitudes_full(self, qubit):\n        \"\"\"simulation time of RealAmplitudes\"\"\"\n        return self._track(RealAmplitudes(qubit, entanglement='full'))", "name": "statevector_cpu.Benchmark.track_real_amplitudes_full", "param_names": ["qubits"], "params": [["5", "15", "25"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "deaba9296a9da8e196c78d51ff5ca943f257c888540ba5576b2a585c192226ec"}, "statevector_cpu.ExpVal.track_expval": {"code": "class ExpVal:\n    def track_expval(self, qubit):\n        \"\"\"track only time to calculate expectation values of RealAmplitudes with 1K pauli-strings\"\"\"\n        terms = 1000\n        circuit = QuantumCircuit(qubit)\n        for i in range(qubit):\n            circuit.h(i)\n    \n        rng = np.random.default_rng(1)\n        pauli_strings = [''.join(s) for s in rng.choice(['I', 'X', 'Y', 'Z'], size=(terms, qubit))]\n        try:\n            op = None\n            for pauli_string in pauli_strings:\n                if op is None:\n                    op = 1 / terms * qi.SparsePauliOp(pauli_string)\n                else:\n                    op += 1 / terms * qi.SparsePauliOp(pauli_string)\n            circuit.save_expectation_value(op, range(qubit))\n        except:\n            from qiskit.providers.aer.extensions import snapshot_expectation_value\n            circuit.snapshot_expectation_value('expval', [(1/terms, pauli) for pauli in pauli_strings], range(qubit))\n    \n        start_ts = time()\n        result = self._run(circuit)\n        end_ts = time()\n        if not result.success:\n            raise ValueError(result.status)\n    \n        return end_ts - start_ts", "name": "statevector_cpu.ExpVal.track_expval", "param_names": ["qubits"], "params": [["5", "15", "25"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "7f109e6e5c5ee6682cd74f42db68703d60be7286369f4e3e953c648e23adc873"}, "statevector_cpu.ExpVal.track_expval_var": {"code": "class ExpVal:\n    def track_expval_var(self, qubit):\n        \"\"\"track only time to calculate expectation value variances of RealAmplitudes with 100 pauli-strings\"\"\"\n    \n        terms = 100\n        circuit = QuantumCircuit(qubit)\n        for i in range(qubit):\n            circuit.h(i)\n    \n        rng = np.random.default_rng(1)\n        pauli_strings = [''.join(s) for s in rng.choice(['I', 'X', 'Y', 'Z'], size=(terms, qubit))]\n        try:\n            op = None\n            for pauli_string in pauli_strings:\n                if op is None:\n                    op = rng.random() * qi.SparsePauliOp(pauli_string)\n                else:\n                    op += rng.random() * qi.SparsePauliOp(pauli_string)\n            circuit.save_expectation_value_variance(op, range(qubit))\n        except:\n            raise ValueError('no save_expectation_value_variance')\n    \n        start_ts = time()\n        result = self._run(circuit)\n        end_ts = time()\n        if not result.success:\n            raise ValueError(result.status)\n        return end_ts - start_ts", "name": "statevector_cpu.ExpVal.track_expval_var", "param_names": ["qubits"], "params": [["5", "15", "25"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "83923e073a5341551ad6fb0ebf586c128d58bffefc4e328c0f2a727e6c33ea02"}, "statevector_cpu.Noise.track_amplitude_damping_error": {"code": "class Noise:\n    def track_amplitude_damping_error(self, qubit):\n        \"\"\"track only time to simulate quantum volume transpiled with basis gates U and CX with amplitude damping error\"\"\"\n        circuit = QuantumVolume(qubit)\n        circuit.measure_all()\n    \n        circuit = transpile(circuit, self.simulator(), basis_gates=['u', 'cx'])\n    \n        noise_model = NoiseModel()\n        noise_model.add_all_qubit_quantum_error(amplitude_damping_error(1e-3), 'u')\n        cx_error = amplitude_damping_error(1e-2)\n        cx_error = cx_error.tensor(cx_error)\n        noise_model.add_all_qubit_quantum_error(cx_error, 'cx')\n    \n        start_ts = time()\n        result = self._run(circuit, noise_model=noise_model)\n        end_ts = time()\n        if not result.success:\n            raise ValueError(result.status)\n    \n        return end_ts - start_ts", "name": "statevector_cpu.Noise.track_amplitude_damping_error", "param_names": ["qubits"], "params": [["5", "15"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "1ae537b10bcaaa212ad175fb18f5879215df3038db7b6e18acace71c2e83d1b9"}, "statevector_cpu.Noise.track_depolarizing_error": {"code": "class Noise:\n    def track_depolarizing_error(self, qubit):\n        \"\"\"track only time to simulate quantum volume transpiled with basis gates U and CX with depolarizing error\"\"\"\n        circuit = QuantumVolume(qubit)\n        circuit.measure_all()\n    \n        circuit = transpile(circuit, self.simulator(), basis_gates=['u', 'cx'])\n    \n        noise_model = NoiseModel()\n        noise_model.add_all_qubit_quantum_error(depolarizing_error(1e-3, 1), ['u'])\n        noise_model.add_all_qubit_quantum_error(depolarizing_error(1e-2, 2), ['cx'])\n    \n        start_ts = time()\n        result = self._run(circuit, noise_model=noise_model)\n        end_ts = time()\n        if not result.success:\n            raise ValueError(result.status)\n    \n        return end_ts - start_ts", "name": "statevector_cpu.Noise.track_depolarizing_error", "param_names": ["qubits"], "params": [["5", "15"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "c1d9e9bf64f849460d30e28d7d07e7460dd942516fb530d20823269d86a90349"}, "statevector_cpu.Noise.track_readout_error": {"code": "class Noise:\n    def track_readout_error(self, qubit):\n        \"\"\"track only time to simulate quantum volume transpiled with basis gates U and CX with amplitude damping error\"\"\"\n        circuit = QuantumVolume(qubit)\n        circuit.measure_all()\n    \n        circuit = transpile(circuit, self.simulator())\n    \n        readout_error = [0.01, 0.1]\n        noise_model = NoiseModel()\n        readout = [[1.0 - readout_error[0], readout_error[0]],\n                   [readout_error[1], 1.0 - readout_error[1]]]\n        noise_model.add_all_qubit_readout_error(ReadoutError(readout))\n    \n        start_ts = time()\n        result = self._run(circuit, noise_model=noise_model)\n        end_ts = time()\n        if not result.success:\n            raise ValueError(result.status)\n    \n        return end_ts - start_ts", "name": "statevector_cpu.Noise.track_readout_error", "param_names": ["qubits"], "params": [["5", "15"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "7ed34efcc3cb32bf896adda8e7944f30bf130b39b67a15730e301af2ec7d4a4c"}, "statevector_gpu.Benchmark.track_qft": {"code": "class Benchmark:\n    def track_qft(self, qubit):\n        \"\"\"simulation time of QFT\"\"\"\n        return self._track(QFT(qubit))", "name": "statevector_gpu.Benchmark.track_qft", "param_names": ["qubits"], "params": [["5", "15", "25"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "c3dfddacec0ce86b1c896f6da241c4cd962fa7ef5b14061a87088bef8b72f7fb"}, "statevector_gpu.Benchmark.track_qv": {"code": "class Benchmark:\n    def track_qv(self, qubit):\n        \"\"\"simulation time of QuantumVolume\"\"\"\n        return self._track(QuantumVolume(qubit))", "name": "statevector_gpu.Benchmark.track_qv", "param_names": ["qubits"], "params": [["5", "15", "25"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "acee30c375289ab8b13fd006878a17f25c55db947ee38d1b51739ea97395f393"}, "statevector_gpu.Benchmark.track_real_amplitudes": {"code": "class Benchmark:\n    def track_real_amplitudes(self, qubit):\n        \"\"\"simulation time of RealAmplitudes\"\"\"\n        return self._track(RealAmplitudes(qubit))", "name": "statevector_gpu.Benchmark.track_real_amplitudes", "param_names": ["qubits"], "params": [["5", "15", "25"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "23e553ad8daacb71ae3ff82b69f29e3c4c784a6350c7600e88d062a22ab92003"}, "statevector_gpu.Benchmark.track_real_amplitudes_full": {"code": "class Benchmark:\n    def track_real_amplitudes_full(self, qubit):\n        \"\"\"simulation time of RealAmplitudes\"\"\"\n        return self._track(RealAmplitudes(qubit, entanglement='full'))", "name": "statevector_gpu.Benchmark.track_real_amplitudes_full", "param_names": ["qubits"], "params": [["5", "15", "25"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "deaba9296a9da8e196c78d51ff5ca943f257c888540ba5576b2a585c192226ec"}, "statevector_gpu.ExpVal.track_expval": {"code": "class ExpVal:\n    def track_expval(self, qubit):\n        \"\"\"track only time to calculate expectation values of RealAmplitudes with 1K pauli-strings\"\"\"\n        terms = 1000\n        circuit = QuantumCircuit(qubit)\n        for i in range(qubit):\n            circuit.h(i)\n    \n        rng = np.random.default_rng(1)\n        pauli_strings = [''.join(s) for s in rng.choice(['I', 'X', 'Y', 'Z'], size=(terms, qubit))]\n        try:\n            op = None\n            for pauli_string in pauli_strings:\n                if op is None:\n                    op = 1 / terms * qi.SparsePauliOp(pauli_string)\n                else:\n                    op += 1 / terms * qi.SparsePauliOp(pauli_string)\n            circuit.save_expectation_value(op, range(qubit))\n        except:\n            from qiskit.providers.aer.extensions import snapshot_expectation_value\n            circuit.snapshot_expectation_value('expval', [(1/terms, pauli) for pauli in pauli_strings], range(qubit))\n    \n        start_ts = time()\n        result = self._run(circuit)\n        end_ts = time()\n        if not result.success:\n            raise ValueError(result.status)\n    \n        return end_ts - start_ts", "name": "statevector_gpu.ExpVal.track_expval", "param_names": ["qubits"], "params": [["5", "15", "25"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "7f109e6e5c5ee6682cd74f42db68703d60be7286369f4e3e953c648e23adc873"}, "statevector_gpu.ExpVal.track_expval_var": {"code": "class ExpVal:\n    def track_expval_var(self, qubit):\n        \"\"\"track only time to calculate expectation value variances of RealAmplitudes with 100 pauli-strings\"\"\"\n    \n        terms = 100\n        circuit = QuantumCircuit(qubit)\n        for i in range(qubit):\n            circuit.h(i)\n    \n        rng = np.random.default_rng(1)\n        pauli_strings = [''.join(s) for s in rng.choice(['I', 'X', 'Y', 'Z'], size=(terms, qubit))]\n        try:\n            op = None\n            for pauli_string in pauli_strings:\n                if op is None:\n                    op = rng.random() * qi.SparsePauliOp(pauli_string)\n                else:\n                    op += rng.random() * qi.SparsePauliOp(pauli_string)\n            circuit.save_expectation_value_variance(op, range(qubit))\n        except:\n            raise ValueError('no save_expectation_value_variance')\n    \n        start_ts = time()\n        result = self._run(circuit)\n        end_ts = time()\n        if not result.success:\n            raise ValueError(result.status)\n        return end_ts - start_ts", "name": "statevector_gpu.ExpVal.track_expval_var", "param_names": ["qubits"], "params": [["5", "15", "25"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "83923e073a5341551ad6fb0ebf586c128d58bffefc4e328c0f2a727e6c33ea02"}, "statevector_gpu.Noise.track_amplitude_damping_error": {"code": "class Noise:\n    def track_amplitude_damping_error(self, qubit):\n        \"\"\"track only time to simulate quantum volume transpiled with basis gates U and CX with amplitude damping error\"\"\"\n        circuit = QuantumVolume(qubit)\n        circuit.measure_all()\n    \n        circuit = transpile(circuit, self.simulator(), basis_gates=['u', 'cx'])\n    \n        noise_model = NoiseModel()\n        noise_model.add_all_qubit_quantum_error(amplitude_damping_error(1e-3), 'u')\n        cx_error = amplitude_damping_error(1e-2)\n        cx_error = cx_error.tensor(cx_error)\n        noise_model.add_all_qubit_quantum_error(cx_error, 'cx')\n    \n        start_ts = time()\n        result = self._run(circuit, noise_model=noise_model)\n        end_ts = time()\n        if not result.success:\n            raise ValueError(result.status)\n    \n        return end_ts - start_ts", "name": "statevector_gpu.Noise.track_amplitude_damping_error", "param_names": ["qubits"], "params": [["5", "15"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "1ae537b10bcaaa212ad175fb18f5879215df3038db7b6e18acace71c2e83d1b9"}, "statevector_gpu.Noise.track_depolarizing_error": {"code": "class Noise:\n    def track_depolarizing_error(self, qubit):\n        \"\"\"track only time to simulate quantum volume transpiled with basis gates U and CX with depolarizing error\"\"\"\n        circuit = QuantumVolume(qubit)\n        circuit.measure_all()\n    \n        circuit = transpile(circuit, self.simulator(), basis_gates=['u', 'cx'])\n    \n        noise_model = NoiseModel()\n        noise_model.add_all_qubit_quantum_error(depolarizing_error(1e-3, 1), ['u'])\n        noise_model.add_all_qubit_quantum_error(depolarizing_error(1e-2, 2), ['cx'])\n    \n        start_ts = time()\n        result = self._run(circuit, noise_model=noise_model)\n        end_ts = time()\n        if not result.success:\n            raise ValueError(result.status)\n    \n        return end_ts - start_ts", "name": "statevector_gpu.Noise.track_depolarizing_error", "param_names": ["qubits"], "params": [["5", "15"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "c1d9e9bf64f849460d30e28d7d07e7460dd942516fb530d20823269d86a90349"}, "statevector_gpu.Noise.track_readout_error": {"code": "class Noise:\n    def track_readout_error(self, qubit):\n        \"\"\"track only time to simulate quantum volume transpiled with basis gates U and CX with amplitude damping error\"\"\"\n        circuit = QuantumVolume(qubit)\n        circuit.measure_all()\n    \n        circuit = transpile(circuit, self.simulator())\n    \n        readout_error = [0.01, 0.1]\n        noise_model = NoiseModel()\n        readout = [[1.0 - readout_error[0], readout_error[0]],\n                   [readout_error[1], 1.0 - readout_error[1]]]\n        noise_model.add_all_qubit_readout_error(ReadoutError(readout))\n    \n        start_ts = time()\n        result = self._run(circuit, noise_model=noise_model)\n        end_ts = time()\n        if not result.success:\n            raise ValueError(result.status)\n    \n        return end_ts - start_ts", "name": "statevector_gpu.Noise.track_readout_error", "param_names": ["qubits"], "params": [["5", "15"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "7ed34efcc3cb32bf896adda8e7944f30bf130b39b67a15730e301af2ec7d4a4c"}, "unitary_cpu.Benchmark.track_qft": {"code": "class Benchmark:\n    def track_qft(self, qubit):\n        \"\"\"simulation time of QFT\"\"\"\n        return self._track(QFT(qubit))", "name": "unitary_cpu.Benchmark.track_qft", "param_names": ["qubits"], "params": [["5", "13"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "c3dfddacec0ce86b1c896f6da241c4cd962fa7ef5b14061a87088bef8b72f7fb"}, "unitary_cpu.Benchmark.track_qv": {"code": "class Benchmark:\n    def track_qv(self, qubit):\n        \"\"\"simulation time of QuantumVolume\"\"\"\n        return self._track(QuantumVolume(qubit))", "name": "unitary_cpu.Benchmark.track_qv", "param_names": ["qubits"], "params": [["5", "13"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "acee30c375289ab8b13fd006878a17f25c55db947ee38d1b51739ea97395f393"}, "unitary_cpu.Benchmark.track_real_amplitudes": {"code": "class Benchmark:\n    def track_real_amplitudes(self, qubit):\n        \"\"\"simulation time of RealAmplitudes\"\"\"\n        return self._track(RealAmplitudes(qubit))", "name": "unitary_cpu.Benchmark.track_real_amplitudes", "param_names": ["qubits"], "params": [["5", "13"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "23e553ad8daacb71ae3ff82b69f29e3c4c784a6350c7600e88d062a22ab92003"}, "unitary_cpu.Benchmark.track_real_amplitudes_full": {"code": "class Benchmark:\n    def track_real_amplitudes_full(self, qubit):\n        \"\"\"simulation time of RealAmplitudes\"\"\"\n        return self._track(RealAmplitudes(qubit, entanglement='full'))", "name": "unitary_cpu.Benchmark.track_real_amplitudes_full", "param_names": ["qubits"], "params": [["5", "13"]], "timeout": 60.0, "type": "track", "unit": "ms", "version": "deaba9296a9da8e196c78d51ff5ca943f257c888540ba5576b2a585c192226ec"}}, "machines": {"s7f-quantum": {"arch": "x86_64", "cpu": "Intel(R) Xeon(R) Gold 6140 CPU @ 2.30GHz", "machine": "s7f-quantum", "num_cpu": "72", "os": "Linux 4.15.0-65-generic", "ram": "394857468", "version": 1}}, "tags": {"0.1.0": 344, "0.1.1": 398, "0.10.0": 2501, "0.10.1": 2513, "0.10.2": 2539, "0.2.0": 633, "0.2.1": 648, "0.2.2": 718, "0.2.3": 723, "0.3.0": 785, "0.3.1": 823, "0.3.2": 831, "0.3.3": 868, "0.3.4": 925, "0.4.0": 1092, "0.4.1": 1148, "0.4.2": 1169, "0.5.0": 1169, "0.5.1": 1215, "0.5.2": 1310, "0.6.0": 1395, "0.6.1": 1401, "0.7.0": 1500, "0.7.1": 1571, "0.7.2": 1701, "0.7.3": 1783, "0.7.4": 1810, "0.7.5": 1838, "0.7.6": 1880, "0.8.0": 1960, "0.8.1": 2004, "0.8.2": 2035, "0.9.0": 2341, "0.9.1": 2386}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}